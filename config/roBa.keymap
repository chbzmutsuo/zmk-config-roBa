#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E             &kp R      &kp T                                                                 &kp Y                            &kp U  &lt 2 I    &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D             &kp F      &kp G        &kp LS(LG(S))                          &kp MINUS         &kp H                            &kp J  &kp K      &kp L    &kp SEMICOLON
&mt LEFT_CONTROL Z  &kp X         &kp C             &kp V      &kp B        &kp COLON                              &kp SINGLE_QUOTE  &kp N                            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LEFT_SHIFT      &kp LEFT_ALT  &kp LEFT_COMMAND  &kp SPACE  &lt 4 SPACE  &mt LA(LEFT_CONTROL) INT_MUHENKAN      &kp BACKSPACE     &mt LA(LEFT_CONTROL) LANGUAGE_1                             &lt 1 A
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                             &trans                &kp BACKSLASH     &kp GRAVE       &kp MINUS          &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans      &kp BACKSPACE  &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp UP_ARROW    &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS
&trans  &trans  &trans  &trans  &trans  &trans      &trans         &trans                &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW    &mo 2
&trans  &trans  &trans  &trans  &trans  &trans      &trans         &kp ENTER                                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans  &kp LS(LG(LC(LEFT)))  &kp LS(LA(LC(UP_ARROW)))  &kp LS(LG(LC(RIGHT)))        &trans
&trans  &trans  &trans  &trans  &trans    &trans        &trans  &trans  &kp LS(LA(LC(LEFT)))  &kp LG(M)                 &kp LS(LC(LA(RIGHT_ARROW)))  &trans
&trans  &trans  &trans  &trans  &trans    &trans        &trans  &trans  &kp LS(LA(LG(LEFT)))  &trans                    &kp LA(LS(LG(RIGHT)))        &trans
&trans  &trans  &trans  &trans  &mkp MB1  &mkp MB2      &trans  &trans                                                                               &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &trans      &kp F12  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DLLR      &kp PERCENT                                        &kp CARET     &kp AMPERSAND  &kp ASTERISK  &trans        &trans
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp LC(LA(KP_NUMBER_0))      &trans  &kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&trans           &trans        &trans        &trans        &trans        &trans                       &trans  &trans        &trans         &trans        &trans        &trans
&trans           &trans        &trans        &trans        &trans        &trans                       &trans  &trans                                                   &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans    &trans                          &trans    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans    &trans        &trans  &trans    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans    &trans        &trans  &trans    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &mkp MB4  &mkp MB1  &mkp MB2      &trans  &mkp MB5                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
