#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    tapping-term-ms = <110>;
    quick-tap-ms = <80>;
    flavor = "balanced";
};

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <110>;
    quick-tap-ms = <80>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
            timeout-ms = <100>;
        };

        double_quotation {
            bindings = <&kp APOSTROPHE>;
            key-positions = <8 7>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        PW {
            bindings = <&PW>;
            key-positions = <18 19 20>;
        };

        backquote {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
        };

        BS {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
        };

        pw2 {
            bindings = <&pw2>;
            key-positions = <17 18 19>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <20 21>;
        };
    };

    macros {
        PW: PW {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp I &kp M &kp E &kp S &kp P &kp A &kp C &kp E &kp R &kp N8 &kp N1 &kp N7>;
            label = "PW";
        };

        divider: divider {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp FSLH>;
            label = "DIVIDER";
        };

        pw2: pw2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp T &kp I &kp M &kp E &kp AT &kp LS(S) &kp P &kp A &kp C &kp E &kp R &kp N8 &kp N1 &kp N7>;
            label = "PW2";
        };
    };

    behaviors {
        hold_mkp: hold_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_MKP";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <110>;
            quick-tap-ms = <80>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E             &kp R      &kp T                                                                 &kp Y                            &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D             &kp F      &kp G                     &trans                      &trans          &kp H                            &kp J  &kp K      &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C             &kp V      &kp B                     &trans                      &trans          &kp N                            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&mo 3             &kp LEFT_ALT  &kp LEFT_COMMAND  &kp SPACE  &mt LG(LEFT_CONTROL) TAB  &mt LEFT_CONTROL GRAVE      &kp LEFT_SHIFT  &mt LA(LEFT_CONTROL) LANGUAGE_1                             &mo 1
            >;

            sensor-bindings = <&inc_dec_kp LG(EQUAL) LG(MINUS)>;
        };

        ARROW {
            bindings = <
&trans  &trans     &trans     &trans         &trans                      &kp LPAR       &kp LEFT_BRACKET  &kp UP_ARROW    &kp RIGHT_BRACKET  &kp RPAR
&trans  &kp LG(Z)  &trans     &kp LS(LG(Z))  &trans  &trans      &trans  &kp BACKSPACE  &kp LEFT          &kp DOWN_ARROW  &kp RIGHT          &mo 5
&trans  &trans     &kp LG(C)  &kp LG(V)      &trans  &trans      &trans  &mkp MB4       &mkp MB1          &kp GRAVE       &mkp MB2           &mkp MB5
&trans  &trans     &trans     &trans         &trans  &trans      &trans  &kp ENTER                                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>;
        };

        WINDOW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp LS(LG(LC(LEFT)))        &kp LS(LA(LC(UP_ARROW)))  &kp LS(LG(LC(RIGHT)))        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LS(LA(LC(LEFT)))        &kp LG(M)                 &kp LS(LC(LA(RIGHT_ARROW)))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LS(LA(LG(LEFT_ARROW)))  &kp LS(LA(LG(UP_ARROW)))  &kp LS(LA(LG(RIGHT)))        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        NUM {
            bindings = <
&kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)                              &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp COLON   &kp BSLH
&kp N1        &kp N2      &kp N3         &kp N4        &kp N5                &trans      &trans   &kp N6         &kp N7        &kp N8        &kp N9      &kp N0
&kp COLON     &kp F2      &trans         &kp F4        &kp F8                &trans      &kp F12  &kp F6         &kp F7        &kp KP_COMMA  &kp KP_DOT  &kp KP_DIVIDE
&trans        &trans      &trans         &trans        &kp NON_US_BACKSLASH  &trans      &trans   &trans                                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp LS(LG(LC(LEFT)))  &kp LS(LA(LC(UP_ARROW)))  &kp LS(LG(LC(RIGHT)))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LC(LA(LS(LEFT)))  &kp LG(M)                 &kp LS(LA(LC(RIGHT)))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LS(LA(LG(LEFT)))  &kp LS(LG(UP_ARROW))      &kp LS(LA(LG(RIGHT)))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                         &trans
            >;
        };

        FUNCTION {
            bindings = <
&kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans                       &trans  &trans  &trans  &trans  &trans
&kp F1             &kp F2           &kp F3                &kp F4                &kp F5  &trans      &kp F12  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans             &trans           &trans                &trans                &trans  &trans      &trans   &trans  &trans  &trans  &trans  &trans
&trans             &trans           &trans                &trans                &trans  &trans      &trans   &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        WINDOW {
            if-layers = <1 3>;
            then-layer = <2>;
        };
    };
};
